{"version":3,"sources":["components/Reviews/Reviews.js"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","moviesApi","fetchMovieReviews","then","console","log","length","map","id","author","content"],"mappings":"iOAIe,SAASA,IAAW,IACzBC,EAAYC,cAAZD,QADwB,EAEFE,mBAAS,MAFP,mBAEzBC,EAFyB,KAEhBC,EAFgB,KAYhC,OARAC,qBAAU,WAENC,IAAUC,kBAAkBP,GAASQ,KAAKJ,KAG3C,CAACJ,IACJS,QAAQC,IAAIP,GAGV,mCACGA,GAAWA,EAAQQ,OAAS,EAC3B,6BACGR,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,+BACE,6BAAKD,IACL,+BAAOC,MAFAF,QAOb","file":"static/js/Reviews.e7b99f22.chunk.js","sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport moviesApi from \"../../services/moviesApi\";\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const renderMovieReviews = () => {\n      moviesApi.fetchMovieReviews(movieId).then(setReviews);\n    };\n    renderMovieReviews();\n  }, [movieId]);\n  console.log(reviews);\n\n  return (\n    <>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h2>{author}</h2>\n              <span>{content}</span>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <span>We don't have reviews for this movie.</span>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}