{"version":3,"sources":["services/moviesApi.js","components/MovieDetailsPage/MovieDetailsPage.js"],"names":["movie_id","a","config","url","axios","data","Error","cast","results","query","params","defaults","baseURL","api_key","language","api","fetchTrendingMovies","fetchMovieDetails","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","Cast","lazy","Reviews","MovieDetailsPage","movieId","useParams","useRouteMatch","path","history","useHistory","location","useLocation","useState","movie","setMovie","isVisibleCast","setIsVisibleCast","isVisibleReviews","setIsVisibleReviews","useEffect","moviesApi","then","onClick","state","from","push","src","poster_path","alt","title","release_date","split","vote_average","overview","genres","map","genre","name","join","role","aria-label","to","pathname","fallback"],"mappings":"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","file":"static/js/MovieDetailsPage.ec73f408.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"3b0a0f3678b03bfe7113d836939cb420\";\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: \"en-US\",\n};\n\nconst fetchTrendingMovies = async () => {\n  try {\n    const config = {\n      url: `trending/movie/week`,\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n};\n\nasync function fetchMovieDetails(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMovieCast(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}/credits`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data.cast;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMovieReviews(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}/reviews`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMoviesByQuery(query) {\n  try {\n    const config = {\n      url: `search/movie`,\n      params: {\n        query,\n      },\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMoviesByQuery,\n};\n\nexport default api;\n\n//___________________________________________________________________________________\n// Api using fetch()\n// const baseURL = `https://api.themoviedb.org/3`;\n\n// function fetchTrendingMovies() {\n//   const url = `${baseURL}/trending/${media_type}/${time_window}?api_key=${key}`;\n//   return fetch(url)\n//     .then(response => response.json())\n//     .then(({ results }) => {\n//       return results;\n//     });\n// }\n","import { useState, useEffect, lazy, Suspense } from \"react\";\nimport {\n  useParams,\n  Route,\n  NavLink,\n  useRouteMatch,\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\nimport moviesApi from \"../../services/moviesApi\";\n\nconst Cast = lazy(() => import(\"../Cast\" /* webpackChunkName: \"Cast\" */));\nconst Reviews = lazy(() =>\n  import(\"../Reviews\" /* webpackChunkName: \"Reviews\" */)\n);\n\nexport default function MovieDetailsPage() {\n  const srcBaseUrl = \"https://image.tmdb.org/t/p/w500\";\n  const { movieId } = useParams();\n  const { url, path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const [movie, setMovie] = useState(null);\n  const [isVisibleCast, setIsVisibleCast] = useState(false);\n  const [isVisibleReviews, setIsVisibleReviews] = useState(false);\n\n  useEffect(() => {\n    const renderMovieDetails = () => {\n      moviesApi.fetchMovieDetails(movieId).then(setMovie);\n    };\n    renderMovieDetails();\n  }, [movieId]);\n\n  const makeVisibleCast = () => {\n    if (isVisibleReviews === true) {\n      setIsVisibleReviews(false);\n    }\n    setIsVisibleCast(true);\n  };\n\n  const makeVisibleReviews = () => {\n    if (isVisibleCast === true) {\n      setIsVisibleCast(false);\n    }\n\n    setIsVisibleReviews(true);\n  };\n\n  const goBack = () => {\n    // history.goBack();\n    if (location.state && location.state.from) {\n      return history.push(location.state.from);\n    }\n    history.push(\"/\");\n  };\n\n  return (\n    <>\n      <button onClick={goBack}>\n        <span>Go Back</span>\n      </button>\n      {movie && (\n        <>\n          <img src={`${srcBaseUrl}${movie.poster_path}`} alt={movie.title} />\n          <h3>\n            {movie.title}({movie.release_date.split(\"-\")[0]})\n          </h3>\n          <span>User Score: {movie.vote_average * 10}%</span>\n          <h2>Overview</h2>\n          <span>{movie.overview}</span>\n          {<h3>Genres</h3>}\n          {<span>{movie.genres.map((genre) => genre.name).join(\" \")}</span>}\n          <hr />\n          <span>Additional information</span>\n          <span role=\"img\" aria-label=\"face emoji\">\n            üëáüèª\n          </span>\n          <ul>\n            <li>\n              <NavLink\n                to={{\n                  pathname: `${url}/cast`,\n                }}\n                onClick={makeVisibleCast}\n              >\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to={{\n                  pathname: `${url}/reviews`,\n                }}\n                onClick={makeVisibleReviews}\n              >\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n          <hr />\n\n          <Suspense fallback={<h1>–ó–∞–≥—Ä—É–∂–∞–µ–º...</h1>}>\n            <Route path={`${path}/:cast`}>\n              {movie && isVisibleCast && <Cast />}\n            </Route>\n\n            <Route path={`${path}/:reviews`}>\n              {movie && isVisibleReviews && <Reviews />}\n            </Route>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}