{"version":3,"sources":["services/moviesApi.js","components/HomePage/homePage.module.css","components/HomePage/HomePage.js"],"names":["movie_id","a","config","url","axios","data","Error","cast","results","query","params","defaults","baseURL","api_key","language","api","fetchTrendingMovies","fetchMovieDetails","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","module","exports","HomePage","useState","trendingMovies","setTrendingMovies","location","useLocation","useEffect","moviesApi","then","response","className","s","filmsList","map","poster_path","title","id","filmsListItem","to","pathname","state","from","src","alt"],"mappings":"mOAwBA,WAAiCA,GAAjC,mBAAAC,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWH,IAHpB,SAM2BI,IAAMF,EAAQF,GANzC,uBAMYK,EANZ,EAMYA,KANZ,kBAOWA,GAPX,gCASI,IAAIC,MAAM,2BATd,0D,kEAaA,WAA8BN,GAA9B,mBAAAC,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWH,EAAX,aAHT,SAM2BI,IAAMF,EAAQF,GANzC,uBAMYK,EANZ,EAMYA,KANZ,kBAOWA,EAAKE,MAPhB,gCASI,IAAID,MAAM,2BATd,0D,kEAaA,WAAiCN,GAAjC,mBAAAC,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWH,EAAX,aAHT,SAM2BI,IAAMF,EAAQF,GANzC,uBAMYK,EANZ,EAMYA,KANZ,kBAOWA,EAAKG,SAPhB,gCASI,IAAIF,MAAM,2BATd,0D,kEAaA,WAAkCG,GAAlC,mBAAAR,EAAA,sEAEUC,EAAS,CACbC,IAAI,eACJO,OAAQ,CACND,UALR,SAS2BL,IAAMF,GATjC,uBASYG,EATZ,EASYA,KATZ,kBAUWA,EAAKG,SAVhB,gCAYI,IAAIF,MAAM,2BAZd,0D,sBA1DAF,IAAMO,SAASC,QAHE,gCAIjBR,IAAMO,SAASD,OAAS,CACtBG,QAJc,mCAKdC,SAAU,SAuEZ,IAAMC,EAAM,CACVC,oBArEuB,uCAAG,gCAAAf,EAAA,sEAElBC,EAAS,CACbC,IAAI,uBAHkB,SAMDC,IAAMF,GANL,uBAMhBG,EANgB,EAMhBA,KANgB,kBAOjBA,EAAKG,SAPY,gCASxB,IAAIF,MAAM,2BATc,yDAAH,qDAsEvBW,kB,4CACAC,e,4CACAC,kB,4CACAC,mB,6CAGaL,O,mBCtFfM,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,UAAY,4BAA4B,cAAgB,kC,gJCI3F,SAASC,IAAY,IAAD,EACWC,mBAAS,IADpB,mBAC1BC,EAD0B,KACVC,EADU,KAG3BC,EAAWC,cAWjB,OATAC,qBAAU,WAENC,IACGd,sBACAe,MAAK,SAACC,GAAD,OAAcN,EAAkBM,QAGzC,IAGD,qCACE,uDACA,oBAAIC,UAAWC,IAAEC,UAAjB,SACGV,EAAeW,KAAI,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,GAAvB,OAClB,oBAAaN,UAAWC,IAAEM,cAA1B,SACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaH,GACrBI,MAAO,CACLC,KAAMjB,EAASe,WAJrB,UAQE,qBAAKG,IAAG,UA1BD,mCA0BC,OAAkBR,GAAeS,IAAI,KAC7C,oBAAIb,UAAWC,IAAEI,MAAjB,SAAyBA,QAVpBC","file":"static/js/HomePage.fecff9a2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"3b0a0f3678b03bfe7113d836939cb420\";\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: \"en-US\",\n};\n\nconst fetchTrendingMovies = async () => {\n  try {\n    const config = {\n      url: `trending/movie/week`,\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n};\n\nasync function fetchMovieDetails(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMovieCast(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}/credits`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data.cast;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMovieReviews(movie_id) {\n  try {\n    const config = {\n      url: `movie/${movie_id}/reviews`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nasync function fetchMoviesByQuery(query) {\n  try {\n    const config = {\n      url: `search/movie`,\n      params: {\n        query,\n      },\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error(\"No response from server\");\n  }\n}\n\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMoviesByQuery,\n};\n\nexport default api;\n\n//___________________________________________________________________________________\n// Api using fetch()\n// const baseURL = `https://api.themoviedb.org/3`;\n\n// function fetchTrendingMovies() {\n//   const url = `${baseURL}/trending/${media_type}/${time_window}?api_key=${key}`;\n//   return fetch(url)\n//     .then(response => response.json())\n//     .then(({ results }) => {\n//       return results;\n//     });\n// }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"homePage_title__15gpg\",\"filmsList\":\"homePage_filmsList__33nGe\",\"filmsListItem\":\"homePage_filmsListItem__2GG8B\"};","import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport moviesApi from \"../../services/moviesApi\";\nimport s from \"./homePage.module.css\";\n\nexport default function HomePage() {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const srcBaseUrl = \"https://image.tmdb.org/t/p/w500\";\n  const location = useLocation();\n\n  useEffect(() => {\n    const renderTrendingMovies = () => {\n      moviesApi\n        .fetchTrendingMovies()\n        .then((response) => setTrendingMovies(response));\n    };\n    renderTrendingMovies();\n  }, []);\n\n  return (\n    <>\n      <h1>Movies in Trend Today</h1>\n      <ul className={s.filmsList}>\n        {trendingMovies.map(({ poster_path, title, id }) => (\n          <li key={id} className={s.filmsListItem}>\n            <Link\n              to={{\n                pathname: `/movies/${id}`,\n                state: {\n                  from: location.pathname,\n                },\n              }}\n            >\n              <img src={`${srcBaseUrl}${poster_path}`} alt=\"\" />\n              <h3 className={s.title}>{title}</h3>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n"],"sourceRoot":""}